"""
Module principal du tableau de bord - Cr√©ation d'un tableau de bord interactif avec Streamlit
"""
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import sys
import os

# Ajoute le r√©pertoire src au chemin Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importe les modules personnalis√©s
from data_fetcher import DataFetcher
from data_processor import DataProcessor

# Configuration de la page
st.set_page_config(
    page_title="Tableau de Bord de Sant√© des Fabricants sur le March√©",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ajoute un titre et une description
st.title("Tableau de Bord de Sant√© des Fabricants sur le March√©")
st.markdown("""
Ce tableau de bord pr√©sente les indicateurs de sant√© des fabricants sur le march√© pour diff√©rentes cat√©gories de produits.
En analysant les indicateurs de performance cl√©s (KPIs), vous pouvez comprendre la position de leadership des fabricants sur le march√©.
""")

# Initialise le r√©cup√©rateur de donn√©es et le processeur
@st.cache_resource
def initialize_data_processor():
    fetcher = DataFetcher()
    processor = DataProcessor()
    return fetcher, processor

fetcher, processor = initialize_data_processor()

# Filtres de la barre lat√©rale
st.sidebar.header("Filtres")

# Charge des donn√©es d'exemple (dans une application r√©elle, elles seraient r√©cup√©r√©es depuis l'API)
@st.cache_data
def load_sample_data():
    # Donn√©es d'exemple pour les produits
    product_data = {
        'logID': list(range(1, 101)),
        'prodID': list(range(101, 201)),
        'catID': np.random.choice([5, 10, 15, 20], 100),
        'fabID': np.random.choice(list(range(1, 21)), 100),
        'dateID': np.random.choice(list(range(1, 366)), 100)  # Supposons que les ID de date 2022 vont de 1 √† 366
    }
    
    # Donn√©es d'exemple pour les accords de vente
    sale_data = {
        'logID': list(range(1, 101)),
        'prodID': list(range(101, 201)),
        'catID': np.random.choice([5, 10, 15, 20], 100),
        'fabID': np.random.choice(list(range(1, 21)), 100),
        'magID': np.random.choice(list(range(1, 31)), 100),  # 30 magasins
        'dateID': np.random.choice(list(range(1, 366)), 100)  # Supposons que les ID de date 2022 vont de 1 √† 366
    }
    
    product_df = pd.DataFrame(product_data)
    sale_df = pd.DataFrame(sale_data)
    
    return product_df, sale_df

product_df, sale_df = load_sample_data()
processor.set_dataframes(product_df, sale_df)

# Ajoute un s√©lecteur d'ID de fabricant dans la barre lat√©rale
manufacturer_id = st.sidebar.number_input("ID du Fabricant", min_value=1, max_value=20, value=1664)

# Ajoute un s√©lecteur de cat√©gorie
available_categories = sorted(product_df['catID'].unique())
category_id = st.sidebar.selectbox("Cat√©gorie de Produit", options=available_categories, index=0 if 5 in available_categories else 0)

# Ajoute un s√©lecteur de plage de dates
start_date = datetime(2022, 1, 1)
end_date = datetime(2022, 12, 31)
date_range = st.sidebar.date_input(
    "Plage de Dates",
    value=(start_date, end_date),
    min_value=start_date,
    max_value=end_date
)

# Si l'utilisateur a s√©lectionn√© une date, la convertit en un tuple contenant les dates de d√©but et de fin
if isinstance(date_range, tuple) and len(date_range) == 2:
    selected_start_date, selected_end_date = date_range
else:
    selected_start_date, selected_end_date = start_date, end_date

# Indicateurs KPI principaux
st.header("Indicateurs de Performance Cl√©s (KPIs)")

# Cr√©e une mise en page √† trois colonnes pour afficher les KPI
col1, col2, col3 = st.columns(3)

with col1:
    # Calcule le nombre d'acteurs du march√© pour la cat√©gorie 5
    actor_count = processor.count_market_actors_by_category(category_id)
    st.metric(
        label=f"Nombre d'Acteurs du March√© - Cat√©gorie {category_id}",
        value=actor_count,
        delta="+2 par rapport au mois dernier",  # Dans une application r√©elle, cela serait calcul√©
        delta_color="normal"
    )

with col2:
    # Calcule le nombre moyen de produits par fabricant pour la cat√©gorie 5
    avg_products = processor.avg_products_per_manufacturer_by_category(category_id)
    st.metric(
        label=f"Nombre Moyen de Produits/Fabricant - Cat√©gorie {category_id}",
        value=f"{avg_products:.2f}",
        delta="-0.5 par rapport au mois dernier",  # Dans une application r√©elle, cela serait calcul√©
        delta_color="normal"
    )

with col3:
    # Calcule le score de sant√© du fabricant
    health_score = processor.manufacturer_health_score(manufacturer_id, category_id)
    st.metric(
        label=f"Score de Sant√© du Fabricant {manufacturer_id}",
        value=f"{health_score:.2%}",
        delta="+1.2% par rapport au mois dernier",  # Dans une application r√©elle, cela serait calcul√©
        delta_color="normal"
    )

# Affiche les 10 premiers magasins
st.header(f"Top 10 des Magasins")
top_stores = processor.top_stores(10)


# Cr√©e un graphique √† barres
fig_stores = px.bar(
    top_stores, 
    x='magID', 
    y='agreement_count',
    title=f"Top 10 des Magasins (par nombre d'accords de vente)",
    labels={"magID": "ID du Magasin", "agreement_count": "Nombre d'Accords de Vente"},
    color='agreement_count',
    color_continuous_scale='Viridis'
)
st.plotly_chart(fig_stores, use_container_width=True)

# Cr√©e une mise en page √† deux colonnes
col1, col2 = st.columns(2)

with col1:
    # Cr√©e un graphique d'√©volution du nombre d'acteurs du march√© au fil du temps (donn√©es simul√©es)
    st.subheader(f"√âvolution du Nombre d'Acteurs du March√© - Cat√©gorie {category_id}")
    
    # Donn√©es mensuelles simul√©es
    months = ['Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 
              'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre']
    # Donn√©es simul√©es, seraient obtenues du processeur dans une application r√©elle
    actor_counts = np.random.randint(15, 25, size=12)
    
    # Cr√©e un graphique lin√©aire
    fig_actors = px.line(
        x=months, 
        y=actor_counts,
        markers=True,
        title=f"Tendance du Nombre d'Acteurs du March√© - Cat√©gorie {category_id} (2022)",
        labels={"x": "Mois", "y": "Nombre d'Acteurs"}
    )
    st.plotly_chart(fig_actors, use_container_width=True)

with col2:
    # Cr√©e un graphique d'√©volution du score de sant√© du fabricant au fil du temps (donn√©es simul√©es)
    st.subheader(f"√âvolution du Score de Sant√© du Fabricant {manufacturer_id}")
    
    # Donn√©es simul√©es, seraient obtenues du processeur dans une application r√©elle
    health_scores = np.random.uniform(0.1, 0.3, size=12)
    
    # Cr√©e un graphique lin√©aire
    fig_health = px.line(
        x=months, 
        y=health_scores,
        markers=True,
        title=f"Tendance du Score de Sant√© du Fabricant {manufacturer_id} (2022)",
        labels={"x": "Mois", "y": "Score de Sant√©"}
    )
    fig_health.update_layout(yaxis_tickformat='.1%')
    st.plotly_chart(fig_health, use_container_width=True)

# Affiche des tableaux de donn√©es (repliables)
with st.expander("Voir les Donn√©es Brutes"):
    tab1, tab2 = st.tabs(["Donn√©es des Produits", "Donn√©es des Accords de Vente"])
    
    with tab1:
        st.dataframe(product_df.head(50))
    
    with tab2:
        st.dataframe(sale_df.head(50))

# Ajoute des annotations et des explications
st.markdown("""
### Explication des KPI

1. **Nombre d'Acteurs du March√©**: Nombre de fabricants actifs sur le march√© pour une cat√©gorie de produit sp√©cifique.
2. **Nombre Moyen de Produits/Fabricant**: Nombre moyen de produits qu'un fabricant propose dans une cat√©gorie sp√©cifique.
3. **Score de Sant√© du Fabricant**: Proportion moyenne des produits d'un fabricant parmi tous les produits d'une cat√©gorie dans les 10 premiers magasins.

### Source des Donn√©es
- Donn√©es provenant de l'API distante: http://51.255.166.155:1353/
- P√©riode d'analyse: 1er janvier 2022 au 31 d√©cembre 2022
""")

# Ajoute un pied de page
st.markdown("---")
st.markdown("¬© 2025 Projet d'Analyse de la Sant√© des Fabricants sur le March√© | Auteur: XXX") 